// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// FSKA
arma::vec FSKA(const arma::mat& X, const arma::vec& ws, const arma::mat& Y, const arma::uword N_min, const double eps, const unsigned int n_threads);
RcppExport SEXP _FSKA_FSKA(SEXP XSEXP, SEXP wsSEXP, SEXP YSEXP, SEXP N_minSEXP, SEXP epsSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type N_min(N_minSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(FSKA(X, ws, Y, N_min, eps, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// test_KD_note
Rcpp::List test_KD_note(const arma::mat& X, const arma::uword N_min);
RcppExport SEXP _FSKA_test_KD_note(SEXP XSEXP, SEXP N_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type N_min(N_minSEXP);
    rcpp_result_gen = Rcpp::wrap(test_KD_note(X, N_min));
    return rcpp_result_gen;
END_RCPP
}
// naive
arma::vec naive(const arma::mat& X, const arma::vec ws, const arma::mat Y, unsigned int n_threads);
RcppExport SEXP _FSKA_naive(SEXP XSEXP, SEXP wsSEXP, SEXP YSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ws(wsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(naive(X, ws, Y, n_threads));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_FSKA_FSKA", (DL_FUNC) &_FSKA_FSKA, 6},
    {"_FSKA_test_KD_note", (DL_FUNC) &_FSKA_test_KD_note, 2},
    {"_FSKA_naive", (DL_FUNC) &_FSKA_naive, 4},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_FSKA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
